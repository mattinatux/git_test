SELECTOR {property: value}
div.bold-text {font-weight: 700;}

Selector types (in reverse order of precedence, most specific wins):
- Universal - * { color: purple; }
- Type - div { color: purple; }
- Class - .alert-text { color: purple; } (applies to <div class="alert-text">)
- ID - #title {color: purple; } (applies to <div id="title">
	^^^case sensitive!

Class v ID: element can have 1 ID, but can have multiple classes. An ID cannot be repeated on a single page.

Grouping selectors:
Instead of two separate selectors sharing property + value combos, combine like this --
	.read,
	.unread {
		color: white;
		background-color: black;
	}

	.read { unique stuff }
	.unread { unique stuff }

Chaining selectors:
If you want to apply a certain style to specific linked selectors. E.g., make the text RED for both the subsection and header IFF both classes are being applied at the same time; DO NOT make text red for just the subsection or header classes --
	.subsection.header { color: red; } APPLIES TO <div class="subsection header">
		AND IT WILL ALSO INCLUDE ANY STYLING IN .subsection and .header class specs

Descendant combinator (note that when you add another selector, it's more specific, so it takes precedence):
If you want to apply a certain style to a selector IFF it is a descendant of another (or multiple) named classes --
	.ancestor .contents { color: red; }
	APPLIES TO
	<div class="ancestor">not here, this is the parent (and note, I'm not closing the div here)
	<div class="contents">but here, because this is the child of it all</div>
	<div class="contents">and here, because this is also under the ancestor div</div>
	</div>

You can nest as deep as you want to target a specific child!
	.ancestor .contents .evenmore .themost {color: blue;}
	APPLIES TO
	<div class="ancestor">not here
		<div class="contents">not here
			<div class="evenmore">not here either
				<div class="themost">but here!</div>
			</div>
		</div>
	</div>


When defining image sizes, it's best practice to include both height and width (even if one is just AUTO) because it will make a space reservation when loading the page. Otherwise, with lazy page loading, you'll have dynamic adjustments causing text to move all over the screen once the image does load.

Inheritance: Typography-based properties are usually inherited (color, font-size, font-family, etc.)

Adding CSS to web pages:
- External CSS
	<head>
		<link rel="stylesheet" href="style.css" />
	</head>
- Embedded CSS
	<head>
		<style>
			. . .
		</style>
	</head>
- Inline CSS (most specific, overrides other things)
	<p><div style="color: white; background-color: black;">...</div></p>

Boxing
	- margin
		space between a box and any others next to it
		margin-top
		margin-right
		margin-bottom
		margin-left

		need to center an element like a button? can use display: block and margin: 0 auto
	- padding
		space between the edge of a box and the contents in it
	- border
		space between the margin and the padding
			border-top . . .
			border-width (px)
			border-style (dotted, double, solid)
			border-color (color)
			border-top-width . . .

margin collapsing: separation of boxes by the vertical margin of one, not both, of the boxes

	*** box-sizing: border-box;
		By default, browsers use the standard box model (Size is a manual summation of height or width + margin + padding).
		If you want to turn on the alternative model for an element, you do so by setting box-sizing: border-box on it.

		If you want all of your elements to use the alternative box model, and this is a common choice among developers, set 
		the box-sizing property on the <html> element, then set all other elements to inherit that value.

	Negative margins can be used to pull things tighter

Inline and Block display

	inline elements do what they sound like they do - they sit inline. if you overflow an element, it will wrap to the next line.
	*** display: inline; vs display: block
		inline doesn't break a box onto a new line
			doesn't apply width/height
			not affect other boxes with vertical padding, margins, or borders
			will affect other boxes with horizontal padding, margins, and borders
		block is default
		inline-block is an option
			unlike inline, inline-block allows width and height set
			inline-block respects top and bottom margins and paddings
			unlike block, inline-block doesn't force a line break after the element (so you can put boxes SxS)

		examples of block and inline default elements: https://www.w3schools.com/html/html_blocks.asp
	
	display: flex
		causes outer display to be block, and inner to be flex
		flex breaks outer onto a new line (and takes full 100% width of the page), but content will look inline (like li will all on one line)

	display: inline-flex
		like flex, except creating an outer inline box around the flex items

